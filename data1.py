# -*- coding: utf-8 -*-
import copy

# Form implementation generated from reading ui file 'data1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import readdata
from PyQt5 import QtCore, QtGui, QtWidgets

global dataset, label, dataset2, a, state, sample_num, sample_rate, sample_class
sample_class = []
sample_num = []
sample_rate = []
state = 0



class Ui_Dialog(QtWidgets.QWidget):
    signal2 = QtCore.pyqtSignal(dict)
    signal1 = QtCore.pyqtSignal(dict)

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(900, 751)
        self.signal2.connect(self.print_val)
        self.standard = QtWidgets.QCheckBox(Dialog)
        self.standard.setGeometry(QtCore.QRect(270, 340, 120, 30))
        self.standard.setObjectName("standard")
        self.guiyi = QtWidgets.QCheckBox(Dialog)
        self.guiyi.setGeometry(QtCore.QRect(430, 340, 120, 30))
        self.guiyi.setObjectName("guiyi")
        self.yulan = QtWidgets.QPushButton(Dialog)
        self.yulan.setGeometry(QtCore.QRect(560, 340, 120, 30))
        self.yulan.setObjectName("yulan")
        self.gonext = QtWidgets.QPushButton(Dialog)
        self.gonext.setGeometry(QtCore.QRect(730, 340, 120, 30))
        self.gonext.setObjectName("gonext")
        self.showtable = QtWidgets.QTableWidget(Dialog)
        self.showtable.setGeometry(QtCore.QRect(50, 20, 520, 300))
        self.showtable.setRowCount(0)
        self.showtable.setColumnCount(5)
        self.showtable.setObjectName("showtable")
        item = QtWidgets.QTableWidgetItem()
        self.showtable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.showtable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.showtable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.showtable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.showtable.setHorizontalHeaderItem(4, item)

        self.showtable.horizontalHeader().setVisible(True)
        self.showtable.horizontalHeader().setHighlightSections(True)
        self.listWidget = QtWidgets.QListWidget(Dialog)
        self.listWidget.setGeometry(QtCore.QRect(590, 20, 260, 300))
        self.listWidget.setObjectName("listWidget")

        item = QtWidgets.QListWidgetItem('全选')
        item.setCheckState(QtCore.Qt.Checked)
        self.listWidget.addItem(item)
        self.checkBox = QtWidgets.QComboBox(Dialog)
        self.checkBox.setGeometry(QtCore.QRect(50, 340, 150, 30))
        self.checkBox.setObjectName("checkBox")
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(50, 390, 800, 280))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.openfile = QtWidgets.QToolButton(Dialog)
        self.openfile.setGeometry(QtCore.QRect(50, 690, 150, 30))
        self.openfile.setMouseTracking(False)
        self.openfile.setCheckable(True)
        self.openfile.setObjectName("openfile")
        self.openfile_2 = QtWidgets.QToolButton(Dialog)
        self.openfile_2.setGeometry(QtCore.QRect(700, 690, 150, 30))
        self.openfile_2.setMouseTracking(False)
        self.openfile_2.setCheckable(True)
        self.openfile_2.setObjectName("openfile_2")
        self.openfile_2.clicked.connect(self.pass_data)
        self.gonext.clicked.connect(self.show_init)

        self.showtable.itemChanged.connect(self.change_value)
        self.listWidget.itemClicked.connect(self.checked_data)
        self.yulan.clicked.connect(self.pre_show)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "数据处理"))
        self.standard.setText(_translate("Dialog", "标准化"))
        self.guiyi.setText(_translate("Dialog", "归一化"))
        self.yulan.setText(_translate("Dialog", "预览"))
        self.gonext.setText(_translate("Dialog", "重置数据"))
        item = self.showtable.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "类别"))
        item = self.showtable.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "样本总量"))
        item = self.showtable.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "样本量"))
        item = self.showtable.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "同类占比"))
        item = self.showtable.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "多类占比"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        # item = self.listWidget.item(0)
        # item.setText(_translate("Dialog", "新建项目"))
        # item = self.listWidget.item(1)
        # item.setText(_translate("Dialog", "新建项目"))
        self.listWidget.setSortingEnabled(__sortingEnabled)
        # self.checkBox.setText(_translate("Dialog", "删除缺失值"))
        self.checkBox.addItems(['不处理缺失值', '删除缺失值所在列', '删除缺失值所在行'])
        self.openfile.setText(_translate("Dialog", "返回"))
        self.openfile_2.setText(_translate("Dialog", "确定"))

    def show_init(self):
        global a, dataset
        # self.signal2.connect(self.print_val)
        a = readdata.sum_excel_file(dataset)

        while self.listWidget.count()>1:
            self.listWidget.takeItem(1)
        self.showtable.setRowCount(a['class_num'])
        for i in range(0, a['class_num']):
            item = QtWidgets.QTableWidgetItem(str(a['class_name'][i]))
            self.showtable.setItem(i, 0, item)
            item = QtWidgets.QTableWidgetItem(str(a['num_class'][i]))
            self.showtable.setItem(i, 1, item)
            item = QtWidgets.QTableWidgetItem(str(a['num_class'][i]))
            self.showtable.setItem(i, 2, item)
            item = QtWidgets.QTableWidgetItem('100%')
            self.showtable.setItem(i, 3, item)
            k = a['num_class'][i] / sum(a['num_class'])
            k = "%.1f%%" % (k * 100)
            item = QtWidgets.QTableWidgetItem(k)
            self.showtable.setItem(i, 4, item)
        for i in range(0, len(a['title_name']) - 1):
            item = QtWidgets.QListWidgetItem(a['title_name'][i])
            item.setCheckState(QtCore.Qt.Checked)
            self.listWidget.addItem(item)
        global state
        state = 1

    def change_value(self, Item=None):
        if Item == None:
            return
        r = Item.row()
        c = Item.column()
        global state
        if state == 1:
            if '%' in Item.text() and c == 3:
                t = float(Item.text().strip('%')) / 100
                k = t * int(self.showtable.item(r, 1).text())
                if str(round(k)) == self.showtable.item(r, 2).text():
                    pass
                else:
                    item = QtWidgets.QTableWidgetItem(str(round(k)))
                    self.showtable.setItem(r, 2, item)
                    all = 0
                    for i in range(self.showtable.rowCount()):
                        all += int(self.showtable.item(i, 2).text())
                    for i in range(self.showtable.rowCount()):
                        k = int(self.showtable.item(i, 2).text())
                        k = k / all
                        k = "%.1f%%" % (k * 100)
                        item = QtWidgets.QTableWidgetItem(k)
                        self.showtable.setItem(i, 4, item)
            elif c == 2:
                t = int(Item.text())
                t = t / int(self.showtable.item(r, 1).text())
                t = "%.1f%%" % (t * 100)
                item = QtWidgets.QTableWidgetItem(str(t))
                self.showtable.setItem(r, 3, item)
                all = 0
                for i in range(self.showtable.rowCount()):
                    all += int(self.showtable.item(i, 2).text())
                for i in range(self.showtable.rowCount()):
                    k = int(self.showtable.item(i, 2).text())
                    k = k / all
                    k = "%.1f%%" % (k * 100)
                    item = QtWidgets.QTableWidgetItem(k)
                    self.showtable.setItem(i, 4, item)

    def checked_data(self, Item=None):
        if Item == None:
            return
        ind = Item.checkState()
        if Item.text() == '全选':
            for i in range(self.listWidget.count()):
                item = self.listWidget.item(i)
                item.setCheckState(ind)
        else:
            if ind == 0:
                # item = self.listWidget.item(self.listWidget.count()-1)
                # item.setCheckState(ind)
                item = self.listWidget.item(0)
                item.setCheckState(ind)
        # for i in range(self.listWidget.count()):
        #     item = self.listWidget.item(i)
        #     if item.checkState()==0:
        #         self.listWidget.count().setCheckState(0)
        #         break

    def pre_show(self):
        global dataset, a, label, dataset2
        num_sam = []
        for i in range(self.showtable.rowCount()):
            num_sam += [int(self.showtable.item(i, 2).text())]
        name_sam = []
        for i in range(1, self.listWidget.count()):
            item = self.listWidget.item(i)
            if item.checkState() == 2:
                name_sam += [item.text()]
        name_sam += [label]
        pk = copy.deepcopy(dataset)
        data = readdata.collect_data(pk,name_sam, a['class_name'], num_sam)
        if self.checkBox.currentText() == '删除缺失值所在列':
            data = readdata.delenan(data, 1)
        elif self.checkBox.currentText() == '删除缺失值所在行':

            data = readdata.delenan(data, 0)
        if self.guiyi.checkState() == 2:
            data = readdata.guiyihua(data, name_sam)
        elif self.standard.checkState() == 2:
            data = readdata.biaozhunhua(data, name_sam)
        # else:
        #     abc = dataset
        dataset2 = data
        self.tableWidget.setColumnCount(data.shape[1])
        self.tableWidget.setRowCount(data.shape[0])
        self.tableWidget.setHorizontalHeaderLabels(data.columns[:])

        for i in range(0, data.shape[1]):
            for j in range(0, data.shape[0]):
                item = QtWidgets.QTableWidgetItem(str(data.iat[j, i]))
                self.tableWidget.setItem(j, i, item)

    def print_val(self, val):
        global dataset, label,state
        dataset = val['dataset']
        label = val['label']
        state = val['state']
        self.show_init()
        self.pre_show()

    def pass_data(self):
        global dataset2, sample_num, sample_rate, sample_class
        try:
            self.pre_show()
            for i in range(self.showtable.rowCount()):
                sample_class += [self.showtable.item(i, 0).text()]
                sample_num += [int(self.showtable.item(i, 2).text())]
                sample_rate += [self.showtable.item(i, 4).text()]
            passdatas = {
                'dataset': dataset2,
                'num': sample_num,
                'rate': sample_rate,
                'class': sample_class

            }

            self.signal1.emit(passdatas)
        except:
            return
